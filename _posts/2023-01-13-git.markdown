---
layout: post
title: "Git의 세계"
date:   2023-01-13 22:00:00 +0900
categories: essay daily
---

싸피에서 각 잡고 제대로 배우게 된 `Git`은 생각보다 더 심오했네요.

그냥 세팅해 놓은대로 `GitHub Desktop`이나 쓰면서 타력 주행으로 여기까지 왔는데, 이젠 슬슬 `CLI` 쓰는 걸 연습할 때가 온 것 같습니다. 여기에 익숙해지지 않으면 앞으로는 과제 하나 제대로 제출하지 못 할 거고, 실제 취업을 하든 창업을 하든 언제까지고 크고 무거운 `GUI`에 의존할 수는 없는 노릇이니까요.

지금까지 배운 걸 간단히 요약만 하겠습니다.

# Git 이란

깃은 여러 번 수정을 거쳐 온 소스코드에 대해, 최신 버전의 소스와 그것이 변해 온 과정을 담은 버전 파일을 갖고 있습니다. 각 버전에 대해서는 소스를 통째로 갖고 있지 않고, 대신 변한 부분만을 저장하여 효율적으로 버전을 관리합니다. 또한 깃 저장소는 여러 군데에 흩어져 있어, 서로가 서로를 보완합니다. 요약하자면

> Git 은 분산형 버전 관리 프로그램이다.

## Git 설정

최초 1회만 이용자 정보에 대해 설정해 주면 됩니다.

```bash
$ git config --global user.name (name)
$ git config --global user.email (address)
```

정보를 확인하고 싶으면 다음 명령어를 입력합니다.

```bash
$ git config --global [-l|--list]
```

## 로컬 환경

로컬에서 깃의 작업 공간은 총 3개로 구분됩니다.
1. Working Directory
2. Staging Area
3. Local Repository

`Working Directory`는 실제 개발자가 작업하는 디렉터리입니다. 파일을 만들고, 코드를 작성하거나 수정하는 곳입니다. 이곳에서 막 작업을 해서 추가되거나 제거된 파일이 있다면 깃은 이를 감지하긴 하지만 별도의 명령이 없으면 이를 관리하지는 않습니다. 이런 상태를 `Untracked`라 합니다.

`Staging Area`는 실제 커밋하기 위한 파일이나 디렉터리를 우선 올려두는 곳입니다. `Working Directory`에서 *이것은 관리하겠다*고 명령하면, 대상이 되는 파일이나 디렉터리는 `Staged` 상태가 되며 이곳에 올라갑니다.

`Local Repository`는 실제로 `Staging Area`에서 관리 대상이 되는 파일 및 디렉터리의 변경사항이 담긴 커밋을 저장하는 곳입니다.

정리하자면 다음과 같습니다.
- `Working Directory`에서 관리할 파일을 `Staging Area`에 올리고, 그 변경 사항을 `Repository`에 커밋합니다.

각 단계에서의 명령어는 다음과 같습니다.

`Working Directory`에서 어떤 파일들이 `Staging Area`에 올라가야 하는지 확인하고 싶다면
```bash
$ git status
```
로 확인하고, 관리하고 싶은 파일을 `Staging Area`로 올리고 싶다면
```bash
$ git add (file_name)
```
합니다. 모든 파일을 일괄적으로 올리고 싶다면
```bash
$ git add .
```
명령 하나로 모든 변경 사항을 `Staging Area`에 올릴 수 있습니다.

지금까지의 모든 커밋 목록을 보고 싶다면
```bash
$ git log
$ git log --oneline
```
명령어로 커밋 로그를 볼 수 있습니다.

현재의 `Staging Area`의 모든 변경 사항을 `Repository`에 실제로 저장하려면
```bash
$ git commit -m (message)
```
로 커밋합니다.

## 원격 환경

로컬 레포지터리에 저장된 버전을 다른 곳에서 작업하거나, 협업이 필요하다면 결국 원격 저장소에 올려야 합니다. 이를 위해서는 우선 원격 저장소의 레포지터리를 끌어오고, 거기에 현재의 커밋 사항들을 밀어넣을 수 있어야 합니다.

원격 저장소를 등록하기 위해서는
```bash
$ git remote add <name> <address>
```
명령어를 입력합니다. 보통 `name`에는 **origin**을 씁니다.

원격 저장소의 조회는
```bash
$ git remote -v
```
명령어로 확인합니다.

원격 저장소에 커밋 내용을 넣기 위해서는
```bash
$ git push <name> <branch>
```
합니다. 보통 `name`에는 **origin**을 쓰고, `branch`는 상황에 따라 달라지는데 주로 **main**이나 **master**에서 작업하게 됩니다.

일단 가볍게 여기까지 정리하겠습니다.